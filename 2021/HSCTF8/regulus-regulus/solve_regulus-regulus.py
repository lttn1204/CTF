from Crypto.PublicKey import RSA
from gmpy2 import *
from Crypto.Util.number import*
n=21503753635256646629725292438197052622783147971384862975368257172417653721754744542750536119197083868824524928294095082722211753307371009079573454300196269962010406137011140096550135172432763537772907791809765433710629320430570143136763467336512486744277201419568380055163318781323759252158048807859689926682452673288997482079588811960021201294934264176850574010025901218872559508728087139072989322094880837468889450639302089092021210403150493891510468540236022278604348831966654159729970724635351021783389297170825137355097105383195479669925846763012335434959268672755938857982025201754047968640755062958084675256407
e=65537
d=20891816858630410366783173171260245885497483827975296326771864300809876066520714932420039607878247769897846273621643073486559756421363914889521964420130565955431688657640314818004183998338937088622863190565808393658897875863333111888002250518797367227392434331549474264497289064870933962546459003220198925976263073713826646873136336323325555690768967041474601773252016510424225973696787023381300690961963147216661740909400568722428617802892777655816948215054505418921915529163071960435600517653751236215124024049044755092382023164746870230596486780766845141175088271563093413549031549599414585704848202522647056141953
key = RSA.construct((n, e, d))
p, q = key.p, key.q
phi = (p-1) * (q-1) // gcd(p-1,q-1)
d_ = inverse(e,phi)
if d_ == d:
    d_ += phi
    
print(d2)
